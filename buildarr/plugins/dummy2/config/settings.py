# Copyright (C) 2024 Callum Dickinson
#
# Buildarr is free software: you can redistribute it and/or modify it under the terms of the
# GNU General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# Buildarr is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with Buildarr.
# If not, see <https://www.gnu.org/licenses/>.


"""
Dummy2 plugin settings configuration.
"""

from __future__ import annotations

from typing import ClassVar, List, Optional, cast
from uuid import UUID, uuid4

from pydantic import Field
from typing_extensions import Annotated, Self

from buildarr.config import RemoteMapEntry
from buildarr.state import state
from buildarr.types import InstanceReference

from ..api import api_get, api_post
from ..secrets import Dummy2Secrets
from .types import Dummy2ConfigBase


class Dummy2SettingsConfig(Dummy2ConfigBase):
    """
    Dummy2 settings configuration.

    Specify any of the following attributes to ensure the attribute
    on the remote Dummy2 instance is set accordingly.

    ```yaml
    dummy2:
      settings:
        trash_value: 5
    ```

    Specify `trash_id` to get a value from TRaSH-Guides metadata and set it to `trash_value`.

    ```yaml
    dummy2:
      settings:
        trash_id: "387e6278d8e06083d813358762e0ac63" # anime
    ```
    """

    instance_name: Annotated[Optional[str], InstanceReference(plugin_name="dummy")] = None
    """
    The name of the Dummy instance within Buildarr, if linking this Dummy2 instance
    with a Buildarr-defined Dummy instance.
    """

    instance_value: Optional[UUID] = Field(default_factory=uuid4)
    """
    Instance-specific UUID generated by Buildarr, which is unique on each execution
    (unless explicitly defined within the Buildarr configuration).

    If `instance_name` is defined, this value will instead be read from the target instance.
    """

    nonexistent_plugin_instance: Annotated[
        Optional[str],
        InstanceReference(plugin_name="dummy3"),
    ] = None
    """
    The name of an instance that belongs to a non-existent plugin.

    Used for validating instance dependency error checking within the functional tests.
    """

    _remote_map: ClassVar[List[RemoteMapEntry]] = [
        (
            "instance_value",  # Buildarr config attribute name.
            "instanceValue",  # Dummy2 instance API attribute name.
            {"check_unmanaged": True},  # Local/remote map conversion function parameters.
        ),
    ]
    """
    A list of remote map entries containing metadata for how to convert
    between local and remote Dummy2 instance configuration values.

    For more information on how to create this structure,
    see the documentation for the following methods in `buildarr/config/__init__.py`:

    * `ConfigBase.get_local_attrs`
    * `ConfigBase.get_create_remote_attrs`
    * `ConfigBase.get_update_remote_attrs`
    """

    def _resolve(self) -> Self:
        """
        Resolve any instance references in this configuration, and
        return an object with fully qualified attribute values.

        Returns:
            Fully qualified Dummy2 configuration object
        """
        if not self.instance_name:
            return self
        secrets = cast(Dummy2Secrets, state.instance_secrets["dummy2"][self.instance_name])
        return self.model_copy(
            update={
                "instance_name": self.instance_name,
                "instance_value": api_get(secrets, "/api/v1/settings")["instanceValue"],
            },
        )

    @classmethod
    def from_remote(cls, secrets: Dummy2Secrets) -> Self:
        """
        Read configuration from a remote instance and return it as a configuration object.

        Args:
            secrets (Dummy2Secrets): Instance host and secrets information

        Returns:
            Configuration object for remote instance
        """
        return cls(
            trash_id=None,
            **cls.get_local_attrs(
                remote_map=cls._remote_map,
                remote_attrs=api_get(secrets, "/api/v1/settings"),
            ),
        )

    def update_remote(
        self,
        tree: str,
        secrets: Dummy2Secrets,
        remote: Self,
        check_unmanaged: bool = False,
    ) -> bool:
        """
        Compare this configuration to a remote instance's, and update the remote to match.

        Args:
            tree (str): Configuration tree represented as a string. Mainly used in logging.
            secrets (Dummy2Secrets): Remote instance host and secrets information.
            remote (Self): Remote instance configuration for the current section.
            check_unmanaged (bool, optional): Set unmanaged fields to defaults (default `False`).

        Returns:
            `True` if the remote configuration changed, otherwise `False`
        """
        changed, remote_attrs = self._resolve().get_update_remote_attrs(
            tree=tree,
            remote=remote,
            remote_map=self._remote_map,
            check_unmanaged=check_unmanaged,
            set_unchanged=True,
        )
        if changed:
            api_post(secrets, "/api/v1/settings", remote_attrs)
            return True
        return False
